(()=>{"use strict";function e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var t=function t(n,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e(this,"enableValidation",(function(){o._setEventListeners()})),e(this,"_setEventListeners",(function(){o._form.addEventListener("input",(function(){o._checkFormValidity()})),o._allInputs.forEach((function(e){e.addEventListener("input",(function(){o._checkInputValidity(e)}))}))})),e(this,"_checkFormValidity",(function(){o._allInputs.some((function(e){return!e.validity.valid}))?o._disableSubmit():o._enableSubmit()})),e(this,"_disableSubmit",(function(){o._button.classList.add(o._inactiveButtonClass),o._button.setAttribute("disabled","disabled")})),e(this,"_enableSubmit",(function(){o._button.classList.remove(o._inactiveButtonClass),o._button.removeAttribute("disabled","disabled")})),e(this,"_checkInputValidity",(function(e){var t=o._getErrorString(e);t.textContent=e.validationMessage,e.validity.valid?o._hideInputError(e,t):o._showInputError(e,t)})),e(this,"_showInputError",(function(e,t){e.classList.add(o._inputErrorClass),t.classList.add(o._errorMessageClass)})),e(this,"_hideInputError",(function(e,t){e.classList.remove(o._inputErrorClass),t.classList.remove(o._errorMessageClass)})),e(this,"_getErrorString",(function(e){return o._form.querySelector(".".concat(e.id,"-error"))})),e(this,"checkFormState",(function(){o._allInputs.forEach((function(e){o._checkFormValidity(e);var t=o._getErrorString(e);o._hideInputError(e,t)}))})),this._form=r,this._submitButtonSelector=n.submitButtonSelector,this._button=r.querySelector(this._submitButtonSelector),this._allInputs=Array.from(r.querySelectorAll(n.inputSelector)),this._inactiveButtonClass=n.inactiveButtonClass,this._inputErrorClass=n.inputErrorClass,this._errorMessageClass=n.errorMessageClass};function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n,r,o,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=t.name,this._link=t.link,this._cardSelector=n,this._handleCardClick=r,this._handleCardDelete=o,this._handleCardLike=i,this.likes=t.likes,this._userId=a,this.cardId=t._id,this.owner=t.owner}var t,r;return t=e,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._like=this._element.querySelector(".element__like"),this._likeCounter=this._element.querySelector(".element__like-counter"),this._cardImage=this._element.querySelector(".element__photo"),this.buttonDeleteCard=this._element.querySelector(".element__delete-icon"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._element.querySelector(".element__title").textContent=this._name,this._setEventListeners(),this._element}},{key:"isLiked",value:function(){var e=this;return this.likes.some((function(t){return t._id===e._userId}))}},{key:"_checkOwner",value:function(){this.owner._id!==this._userId&&this.buttonDeleteCard.remove()}},{key:"handleToggleLike",value:function(){this.isLiked()?this._like.classList.add("element__like_active"):this._like.classList.remove("element__like_active")}},{key:"updateLikes",value:function(e){this._likeCounter.textContent=e}},{key:"deleteMePlease",value:function(){this.buttonDeleteCard.closest(".element").remove()}},{key:"_setEventListeners",value:function(){var e=this;this._like.addEventListener("click",(function(){e._handleCardLike(e)})),this.buttonDeleteCard.addEventListener("click",(function(){e._handleCardDelete(e)})),this._cardImage.addEventListener("click",(function(){e._handleCardClick(e._name,e._link)}))}},{key:"createCard",value:function(){return this._getTemplate(),this.generateCard(),this.handleToggleLike(),this.updateLikes(this.likes.length),this._checkOwner(),this._setEventListeners(),this._element}}])&&n(t.prototype,r),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"reverseItem",value:function(e){this._container.append(e)}}])&&o(t.prototype,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t){var n=t.userNameSelector,r=t.userInfoSelector,o=t.userAvatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=document.querySelector(n),this._userInfo=document.querySelector(r),this._userAvatar=document.querySelector(o),this._userId=""}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,info:this._userInfo.textContent}}},{key:"setUserInfo",value:function(e,t,n){this._userName.textContent=e,this._userInfo.textContent=t,this._userId=n}},{key:"getUserId",value:function(){return this._userId}},{key:"setUserAvatar",value:function(e){this._userAvatar.src=e}}])&&a(t.prototype,n),e}();function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){(e.target.classList.contains("popup")||e.target.classList.contains("popup__button-close"))&&o.close()},(n="_handlerClickClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handlerClickClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handlerClickClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close(this._popup)}},{key:"setEventListeners",value:function(){this._popup.addEventListener("mousedown",this._handlerClickClose)}}])&&c(t.prototype,n),e}();function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t,n){return(f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?d(e):t}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(r);if(o){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return _(this,e)});function a(e,t){var n,r,o,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),u=function(e){e.preventDefault(),n._handlerSubmitForm(n._getInputValues())},(o="_handlerCloseClick")in(r=d(n=i.call(this,e)))?Object.defineProperty(r,o,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[o]=u,n._handlerSubmitForm=t,n._popupForm=n._popup.querySelector(".popup__container"),n._button=n._popup.querySelector(".popup__submit"),n}return t=a,(n=[{key:"_getInputValues",value:function(){this._popupInputs=this._popupForm.querySelectorAll(".popup__input");var e={};return this._popupInputs.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){f(y(a.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",this._handlerCloseClick)}},{key:"close",value:function(){f(y(a.prototype),"close",this).call(this),this._popupForm.reset(),this._popup.removeEventListener("submit",this._handlerCloseClick)}},{key:"updateTextOnButton",value:function(e){this._button.textContent=e}}])&&p(t.prototype,n),a}(s);function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t,n){return(k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=C(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=C(r);if(o){var n=C(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return S(this,e)});function a(e,t){var n,r=e.name,o=e.link;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._popupImage=n._popup.querySelector(".popup__image"),n._popupText=n._popup.querySelector(".popup__image-text"),n._link=o,n._name=r,n}return t=a,(n=[{key:"open",value:function(){k(C(a.prototype),"open",this).call(this),this._popupImage.src=this._link,this._popupImage.alt=this._name,this._popupText.textContent=this._name}}])&&b(t.prototype,n),a}(s);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(e,t,n){return(L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=T(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?P(e):t}function P(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function T(e){return(T=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=T(r);if(o){var n=T(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return j(this,e)});function a(e,t){var n,r,o,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),u=function(e){e.preventDefault(),n._handlerSubmitForm(n.card)},(o="_handlerSubmit")in(r=P(n=i.call(this,t)))?Object.defineProperty(r,o,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[o]=u,n._handlerSubmitForm=e,n._formElement=n._popup.querySelector(".popup__container"),n}return t=a,(n=[{key:"open",value:function(e){L(T(a.prototype),"open",this).call(this),this.card=e}},{key:"close",value:function(){L(T(a.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){L(T(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",this._handlerSubmit)}}])&&O(t.prototype,n),a}(s);function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var x=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._link=t,this._token=n}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return fetch("".concat(this._link,"/cards"),{headers:{authorization:this._token}}).then(this._checkStatus)}},{key:"getUserInfo",value:function(){return fetch("".concat(this._link,"/users/me"),{headers:{authorization:this._token}}).then(this._checkStatus)}},{key:"updateUserInfo",value:function(e,t){return fetch("".concat(this._link,"/users/me"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})}).then(this._checkStatus)}},{key:"addNewCard",value:function(e,t){return fetch("".concat(this._link,"/cards"),{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:e,link:t})}).then(this._checkStatus)}},{key:"_checkStatus",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"addLikeUpdate",value:function(e){return fetch("".concat(this._link,"/cards/likes/").concat(e),{method:"PUT",headers:{authorization:this._token,"Content-Type":"application/json"}}).then(this._checkStatus)}},{key:"deleteLikeUpdate",value:function(e){return fetch("".concat(this._link,"/cards/likes/").concat(e),{method:"DELETE",headers:{authorization:this._token,"Content-Type":"application/json"}}).then(this._checkStatus)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._link,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this._token,"Content-Type":"application/json"}}).then(this._checkStatus)}},{key:"updateAvatar",value:function(e){return fetch("".concat(this._link,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then(this._checkStatus)}}])&&R(t.prototype,n),e}(),A={formSelector:".popup__container",inputSelector:".popup__input",submitButtonSelector:".popup__submit",inactiveButtonClass:"popup__submit_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error",errorMessageClass:"popup__input-error_visible"},B=document.querySelector(".profile__button-edit"),U=document.querySelector(".profile__add-button"),D=document.querySelector(".profile__overlay"),F=document.querySelector(".popup_type_edit"),N=document.querySelector(".popup_type_add"),V=document.querySelector(".popup_type_update-avatar"),M=F.querySelector(".popup__container"),z=N.querySelector(".popup__container"),J=V.querySelector(".popup__container"),H=document.querySelector(".popup__input_type_name"),$=document.querySelector(".popup__input_type_description");function G(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var K=new u({userNameSelector:".profile__name",userInfoSelector:".profile__description",userAvatarSelector:".profile__avatar"}),Q=new t(A,M);Q.enableValidation();var W=new t(A,z);W.enableValidation();var X=new t(A,J);X.enableValidation();var Y=new x("https://mesto.nomoreparties.co/v1/cohort-26","abf7489c-028b-40af-8a54-88899dd941f0"),Z=new q((function(e){Y.deleteCard(e.cardId).then((function(t){"Пост удалён"===t.message&&(e.deleteMePlease(),Z.close())})).catch((function(e){return console.log(e)}))}),".popup_type_delete");function ee(e){Z.open(e),Z.setEventListeners()}function te(e){(e.isLiked()?Y.deleteLikeUpdate(e.cardId):Y.addLikeUpdate(e.cardId)).then((function(t){e.likes=t.likes,e.handleToggleLike(),e.updateLikes(t.likes.length)})).catch((function(e){return console.log(e)}))}function ne(e,t){var n=new w({name:e,link:t},".popup_type_image");n.open(),n.setEventListeners()}function re(e,t){return new r(e,".element-template",ne,ee,te,t).createCard()}Promise.all([Y.getUserInfo(),Y.getInitialCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return G(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?G(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];K.setUserInfo(o.name,o.about,o._id),K.setUserAvatar(o.avatar);var u=new i({renderer:function(e){var t=re(e,o._id);u.reverseItem(t)}},".elements");u.renderItems(a);var c=new v(".popup_type_edit",(function(e){c.updateTextOnButton("Сохранение..."),Y.updateUserInfo(e.authorName,e.authorDescription).then((function(){c.updateTextOnButton("Сохранить"),K.setUserInfo(e.authorName,e.authorDescription),c.close()})).catch((function(e){return console.log(e)}))}));B.addEventListener("click",(function(){var e=K.getUserInfo();H.value=e.name,$.value=e.info,c.open(),Q.checkFormState()})),c.setEventListeners();var s=new v(".popup_type_update-avatar",(function(e){s.updateTextOnButton("Сохранение..."),Y.updateAvatar(e.avatar).then((function(e){s.updateTextOnButton("Сохранить"),K.setUserAvatar(e.avatar),s.close()})).catch((function(e){return console.log(e)}))}));s.setEventListeners(),D.addEventListener("click",(function(){s.open(),X.checkFormState()}));var l=new v(".popup_type_add",(function(e){l.updateTextOnButton("Сохранение..."),Y.addNewCard(e.name,e.link).then((function(e){s.updateTextOnButton("Создать");var t=re(e,o._id);u.addItem(t),l.close()}))}));l.setEventListeners(),U.addEventListener("click",(function(){l.open(),W.checkFormState()}))})).catch((function(e){return console.log(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZXN0by13ZWJwYWNrLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by13ZWJwYWNrLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9tZXN0by13ZWJwYWNrLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by13ZWJwYWNrLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vbWVzdG8td2VicGFjay8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL21lc3RvLXdlYnBhY2svLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLXdlYnBhY2svLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9tZXN0by13ZWJwYWNrLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoU3VibWl0LmpzIiwid2VicGFjazovL21lc3RvLXdlYnBhY2svLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8td2VicGFjay8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8td2VicGFjay8uL3NyYy9wYWdlcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJGb3JtVmFsaWRhdG9yIiwidmFsaWRhdGlvbk9iaiIsImZvcm0iLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfZm9ybSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfY2hlY2tGb3JtVmFsaWRpdHkiLCJfYWxsSW5wdXRzIiwiZm9yRWFjaCIsImlucHV0IiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInNvbWUiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2Rpc2FibGVTdWJtaXQiLCJfZW5hYmxlU3VibWl0IiwiX2J1dHRvbiIsImNsYXNzTGlzdCIsImFkZCIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwiZXJyb3JTdHJpbmciLCJfZ2V0RXJyb3JTdHJpbmciLCJ0ZXh0Q29udGVudCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwid3JvbmdTdHJpbmciLCJfaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yTWVzc2FnZUNsYXNzIiwicXVlcnlTZWxlY3RvciIsImlkIiwidGhpcyIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0U2VsZWN0b3IiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JNZXNzYWdlQ2xhc3MiLCJDYXJkIiwiZGF0YSIsInRlbXBsYXRlIiwiaGFuZGxlQ2FyZENsaWNrIiwiaGFuZGxlQ2FyZERlbGV0ZSIsImhhbmRsZUNhcmRMaWtlIiwidXNlcklkIiwiX25hbWUiLCJuYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfaGFuZGxlQ2FyZERlbGV0ZSIsIl9oYW5kbGVDYXJkTGlrZSIsImxpa2VzIiwiX3VzZXJJZCIsImNhcmRJZCIsIl9pZCIsIm93bmVyIiwiZG9jdW1lbnQiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX2VsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJfbGlrZSIsIl9saWtlQ291bnRlciIsIl9jYXJkSW1hZ2UiLCJidXR0b25EZWxldGVDYXJkIiwic3JjIiwiYWx0IiwiaXRlbSIsImlzTGlrZWQiLCJsaWtlTGVuZ3RoIiwiY2xvc2VzdCIsImdlbmVyYXRlQ2FyZCIsImhhbmRsZVRvZ2dsZUxpa2UiLCJ1cGRhdGVMaWtlcyIsImxlbmd0aCIsIl9jaGVja093bmVyIiwiU2VjdGlvbiIsImNvbnRhaW5lclNlbGVjdG9yIiwicmVuZGVyZXIiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiY2FyZEFyciIsImVsZW1lbnQiLCJwcmVwZW5kIiwiYXBwZW5kIiwiVXNlckluZm8iLCJ1c2VyTmFtZVNlbGVjdG9yIiwidXNlckluZm9TZWxlY3RvciIsInVzZXJBdmF0YXJTZWxlY3RvciIsIl91c2VyTmFtZSIsIl91c2VySW5mbyIsIl91c2VyQXZhdGFyIiwiaW5mbyIsIm5hbWVVcGRhdGUiLCJpbmZvVXBkYXRlIiwiYXZhdGFyIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiZXZ0IiwidGFyZ2V0IiwiY29udGFpbnMiLCJjbG9zZSIsIl9wb3B1cCIsIl9oYW5kbGVFc2NDbG9zZSIsImJpbmQiLCJfaGFuZGxlckNsaWNrQ2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwia2V5IiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZXJTdWJtaXRGb3JtIiwicHJldmVudERlZmF1bHQiLCJfaGFuZGxlclN1Ym1pdEZvcm0iLCJfZ2V0SW5wdXRWYWx1ZXMiLCJfcG9wdXBGb3JtIiwiX3BvcHVwSW5wdXRzIiwiaW5wdXRzTGlzdCIsInZhbHVlIiwiX2hhbmRsZXJDbG9zZUNsaWNrIiwicmVzZXQiLCJ0ZXh0IiwiUG9wdXBXaXRoSW1hZ2UiLCJfcG9wdXBJbWFnZSIsIl9wb3B1cFRleHQiLCJQb3B1cFdpdGhTdWJtaXQiLCJjYXJkIiwiX2Zvcm1FbGVtZW50IiwiX2hhbmRsZXJTdWJtaXQiLCJBcGkiLCJ0b2tlbiIsIl90b2tlbiIsImZldGNoIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJ0aGVuIiwiX2NoZWNrU3RhdHVzIiwiYWJvdXQiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJmb3JtU2VsZWN0b3IiLCJlcnJvckNsYXNzIiwiZWRpdEJ1dHRvbiIsImFkZENhcmRCdXR0b24iLCJlZGl0QXZhdGFyQnV0dG9uIiwicG9wdXBUeXBlRWRpdCIsInBvcHVwVHlwZUFkZCIsInBvcHVwVHlwZVVwZGF0ZSIsInN1Ym1pdEZvcm1FZGl0Iiwic3VibWl0Rm9ybUFkZCIsInN1Ym1pdEZvcm1VcGRhdGUiLCJpbnB1dE5hbWUiLCJkZXNjcmlwdGlvbklucHV0IiwidXNlckluZm8iLCJ2YWxpZGF0ZUZvcm1FZGl0IiwiZW5hYmxlVmFsaWRhdGlvbiIsInZhbGlkYXRlRm9ybUFkZCIsInZhbGlkYXRlRm9ybVVwZGF0ZUF2YXRhciIsImFwaSIsInBvcHVwRGVsZXRlIiwiZGVsZXRlQ2FyZCIsInJlc3BvbnNlIiwibWVzc2FnZSIsImRlbGV0ZU1lUGxlYXNlIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwib3BlbiIsInNldEV2ZW50TGlzdGVuZXJzIiwiZGVsZXRlTGlrZVVwZGF0ZSIsImFkZExpa2VVcGRhdGUiLCJwb3B1cEltZyIsImNyZWF0ZUNhcmQiLCJhbGwiLCJnZXRVc2VySW5mbyIsImdldEluaXRpYWxDYXJkcyIsInVzZXJEYXRhU2VydmVyIiwiY2FyZHNEYXRhU2VydmVyIiwic2V0VXNlckluZm8iLCJzZXRVc2VyQXZhdGFyIiwiY2xhc3NTZWN0aW9uIiwicmV2ZXJzZUl0ZW0iLCJyZW5kZXJJdGVtcyIsInBvcHVwRWRpdCIsInVwZGF0ZVRleHRPbkJ1dHRvbiIsInVwZGF0ZVVzZXJJbmZvIiwiYXV0aG9yTmFtZSIsImF1dGhvckRlc2NyaXB0aW9uIiwidXNlckRhdGEiLCJjaGVja0Zvcm1TdGF0ZSIsInBvcHVwVXBkYXRlQXZhdGFyIiwidXBkYXRlQXZhdGFyIiwicG9wdXBBZGQiLCJDYXJkRGF0YSIsImFkZE5ld0NhcmQiLCJuZXdDYXJkIiwiYWRkSXRlbSJdLCJtYXBwaW5ncyI6IitJQUFxQkEsRUFDakIsV0FBWUMsRUFBZUMsR0FBTSxZLDRGQUFBLG9DQVdkLFdBQ2YsRUFBS0Msd0JBWndCLDZCQWdCWixXQUNqQixFQUFLQyxNQUFNQyxpQkFBaUIsU0FBUyxXQUNqQyxFQUFLQyx3QkFFVCxFQUFLQyxXQUFXQyxTQUFRLFNBQUFDLEdBQ3BCQSxF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RCxHQUNyQkgsRUFBU2xHLGNBSXpCa0csRUFBU3hCLG9CQUNUMUIsbUJBQStCLFNBQVMsV0FDcENrRCxFQUFTekIsT0FDVFosRUFBZ0JrQyx1QkFHdkIxQixPQUFNLFNBQUNDLEdBQUQsT0FBU0MsUUFBUUMsSUFBSUYsTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWxpZGF0aW9uT2JqLCBmb3JtKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybSA9IGZvcm07XHJcbiAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSB2YWxpZGF0aW9uT2JqLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xyXG4gICAgICAgIHRoaXMuX2J1dHRvbiA9IGZvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fYWxsSW5wdXRzID0gQXJyYXkuZnJvbShmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwodmFsaWRhdGlvbk9iai5pbnB1dFNlbGVjdG9yKSk7XHJcbiAgICAgICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IHZhbGlkYXRpb25PYmouaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgICAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSB2YWxpZGF0aW9uT2JqLmlucHV0RXJyb3JDbGFzcztcclxuICAgICAgICB0aGlzLl9lcnJvck1lc3NhZ2VDbGFzcyA9IHZhbGlkYXRpb25PYmouZXJyb3JNZXNzYWdlQ2xhc3M7XHJcbiAgICB9XHJcblxyXG4vLyDQndCw0LnQtNGR0Lwg0LLRgdC1INGE0L7RgNC80Ysg0YEg0YPQutCw0LfQsNC90L3Ri9C8INC60LvQsNGB0YHQvtC8INCyIERPTSwg0LTQtdC70LDQtdC8INC40Lcg0L3QuNGFINC80LDRgdGB0LjQsiDQvNC10YLQvtC00L7QvCBBcnJheS5mcm9tXHJcbiAgICBlbmFibGVWYWxpZGF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcblxyXG4vLyDQntCx0YDQsNCx0L7RgtGH0LjQuiDQvdCwINCy0YHQtSDQuNC90L/Rg9GC0YtcclxuICAgIF9zZXRFdmVudExpc3RlbmVycyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja0Zvcm1WYWxpZGl0eSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2FsbElucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcclxuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbi8vINCf0YDQvtCy0LXRgNC60LAg0L3QsCDQstCw0LvQuNC00L3QvtGB0YLRjCDQuCDQuNC30LzQtdC90LXQvdC40LUg0YHQvtGB0YLQvtGP0L3QuNGPINC60L3QvtC/0LrQuFxyXG4gICAgX2NoZWNrRm9ybVZhbGlkaXR5ID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLl9hbGxJbnB1dHMuc29tZShpbnB1dCA9PiAhaW5wdXQudmFsaWRpdHkudmFsaWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVTdWJtaXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9lbmFibGVTdWJtaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbi8vINCk0YPQvdC60YbQuNC4INC+0YLQutC70Y7Rh9C10L3QuNGPINC4INCy0LrQu9GO0YfQtdC90LjRjyDQutC90L7Qv9C60LggXCLRgdC+0YXRgNCw0L3QuNGC0YxcIlxyXG4gICAgX2Rpc2FibGVTdWJtaXQgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgICAgdGhpcy5fYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICBfZW5hYmxlU3VibWl0ID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2J1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICAgIHRoaXMuX2J1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbi8vINCk0YPQvdC60YbQuNGPINC/0YDQvtCy0LXRgNGP0LXRgiDQstCw0LvQuNC00L3QvtGB0YLRjCDQv9C+0LvRjyDQuCDRgNCw0LHQvtGC0LDQtdGCINGB0L4g0YHRgtGA0L7QutC+0Lkg0L7RiNC40LHQutC4XHJcbiAgICBfY2hlY2tJbnB1dFZhbGlkaXR5ID0gKGlucHV0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZXJyb3JTdHJpbmcgPSB0aGlzLl9nZXRFcnJvclN0cmluZyhpbnB1dCk7XHJcbiAgICAgICAgZXJyb3JTdHJpbmcudGV4dENvbnRlbnQgPSBpbnB1dC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICAgICAgICBpZiAoIWlucHV0LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0LCBlcnJvclN0cmluZyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXQsIGVycm9yU3RyaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4vLyDQlNC+0LHQsNCy0LvQtdC90LjQtSDQuCDRg9C00LDQu9C10L3QuNC1INC/0YHQtdCy0LTQvtC60LvQsNGB0YHQvtCyINGBINC+0YjQuNCx0LrQsNC80Lgg0LfQsNC/0L7Qu9C90LXQvdC40Lkg0LjQvdC/0YPRgtC+0LJcclxuICAgIF9zaG93SW5wdXRFcnJvciA9IChpbnB1dCwgd3JvbmdTdHJpbmcpID0+IHtcclxuICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7IC8vINCf0L7QtNGH0ZHRgNC60LjQstCw0L3QuNC1INGB0YLRgNC+0LrQuCDQutGA0LDRgdC90YvQvFxyXG4gICAgICAgIHdyb25nU3RyaW5nLmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JNZXNzYWdlQ2xhc3MpOyAvLyDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgtC10LrRgdGC0LBcclxuICAgIH1cclxuXHJcbiAgICBfaGlkZUlucHV0RXJyb3IgPSAoaW5wdXQsIHdyb25nU3RyaW5nKSA9PiB7XHJcbiAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgICAgIHdyb25nU3RyaW5nLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JNZXNzYWdlQ2xhc3MpO1xyXG4gICAgfVxyXG5cclxuLy8g0KTRg9C90LrRhtC40Y8g0L/QvtC70YPRh9C10L3QuNGPINC+0YjQuNCx0LrQuFxyXG4gICAgX2dldEVycm9yU3RyaW5nID0gKGlucHV0KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihgLiR7aW5wdXQuaWR9LWVycm9yYCk7XHJcbiAgICB9XHJcblxyXG4vLyDQodCy0LXRgNC10L3QuNC1INC90LXQvtCx0YXQvtC00LjQvNC+0LPQviDQv9GA0Lgg0L7RgtC60YDRi9GC0LjQuCDQv9C+0L/QsNC/0L7QsiDQuCDRg9GB0YLQsNC90L7QstC60LAg0L3Rg9C20L3QvtCz0L4g0LfQvdCw0YfQtdC90LjRjyDQutC90L7Qv9C60Lgg0YHQvtGF0YDQsNC90LjRgtGMXHJcbiAgICBjaGVja0Zvcm1TdGF0ZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLl9hbGxJbnB1dHMuZm9yRWFjaChpbnB1dCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrRm9ybVZhbGlkaXR5KGlucHV0KTtcclxuICAgICAgICAgICAgY29uc3Qgd3JvbmdTdHJpbmcgPSB0aGlzLl9nZXRFcnJvclN0cmluZyhpbnB1dCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0LCB3cm9uZ1N0cmluZyk7IC8vINCe0YfQuNGB0YLQutCwINC90LAg0LLRgdGP0LrQuNC5INGB0LvRg9GH0LDQudC90L4g0L7RgiDRgdC+0YXRgNCw0L3QuNCy0YjQuNGF0YHRjyDQvtGI0LjQsdC+0LpcclxuICAgICAgICB9KTtcclxuICAgIH19XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSwgdGVtcGxhdGUsIGhhbmRsZUNhcmRDbGljaywgaGFuZGxlQ2FyZERlbGV0ZSwgaGFuZGxlQ2FyZExpa2UsIHVzZXJJZCkge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICAgICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcclxuICAgICAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSB0ZW1wbGF0ZTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlQ2FyZERlbGV0ZSA9IGhhbmRsZUNhcmREZWxldGU7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlQ2FyZExpa2UgPSBoYW5kbGVDYXJkTGlrZTtcclxuICAgICAgICB0aGlzLmxpa2VzID0gZGF0YS5saWtlcztcclxuICAgICAgICB0aGlzLl91c2VySWQgPSB1c2VySWQ7XHJcbiAgICAgICAgdGhpcy5jYXJkSWQgPSBkYXRhLl9pZDtcclxuICAgICAgICB0aGlzLm93bmVyID0gZGF0YS5vd25lcjtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAgICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAgICAgICAgIC5jb250ZW50XHJcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudCcpXHJcbiAgICAgICAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgLy8g0JTQvtC20LTQsNGC0YzRgdGPINC00L7QvNC40L3QuNGA0YPRjtGJ0YPRjiDQvtGB0L7QsdGMINC4INC/0YDQvtC00L7Qu9C20LjRgtGMXHJcbiAgICAgICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQ2FyZCgpIHtcclxuICAgICAgICAvLyDQl9Cw0L/QuNGI0LXQvCDRgNCw0LfQvNC10YLQutGDINCyINC/0YDQuNCy0LDRgtC90L7QtSDQv9C+0LvQtSBfZWxlbWVudC5cclxuICAgICAgICAvLyDQotCw0Log0YMg0LTRgNGD0LPQuNGFINGN0LvQtdC80LXQvdGC0L7QsiDQv9C+0Y/QstC40YLRgdGPINC00L7RgdGC0YPQvyDQuiDQvdC10LkuXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICAgICAgdGhpcy5fbGlrZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX2xpa2UnKTtcclxuICAgICAgICB0aGlzLl9saWtlQ291bnRlciA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX2xpa2UtY291bnRlcicpO1xyXG4gICAgICAgIC8vINCU0L7QsdCw0LLQuNC8INC00LDQvdC90YvQtVxyXG4gICAgICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX3Bob3RvJyk7XHJcbiAgICAgICAgdGhpcy5idXR0b25EZWxldGVDYXJkID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fZGVsZXRlLWljb24nKTtcclxuICAgICAgICB0aGlzLl9jYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcclxuICAgICAgICB0aGlzLl9jYXJkSW1hZ2UuYWx0ID0gdGhpcy5fbmFtZTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X190aXRsZScpLnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcclxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIC8vINCS0LXRgNC90ZHQvCDRjdC70LXQvNC10L3RgiDQvdCw0YDRg9C20YNcclxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBpc0xpa2VkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpa2VzLnNvbWUoKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uX2lkID09PSB0aGlzLl91c2VySWQ7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBfY2hlY2tPd25lcigpIHtcclxuICAgICAgICBpZiAodGhpcy5vd25lci5faWQgIT09IHRoaXMuX3VzZXJJZCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1dHRvbkRlbGV0ZUNhcmQucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZVRvZ2dsZUxpa2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNMaWtlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpa2UuY2xhc3NMaXN0LmFkZCgnZWxlbWVudF9fbGlrZV9hY3RpdmUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9saWtlLmNsYXNzTGlzdC5yZW1vdmUoJ2VsZW1lbnRfX2xpa2VfYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUxpa2VzKGxpa2VMZW5ndGgpIHtcclxuICAgIHRoaXMuX2xpa2VDb3VudGVyLnRleHRDb250ZW50ID0gbGlrZUxlbmd0aDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZGVsZXRlTWVQbGVhc2UoKSB7XHJcbiAgICAgICAgdGhpcy5idXR0b25EZWxldGVDYXJkLmNsb3Nlc3QoJy5lbGVtZW50JykucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX2xpa2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNhcmRMaWtlKHRoaXMpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmJ1dHRvbkRlbGV0ZUNhcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNhcmREZWxldGUodGhpcyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHRoaXMuX25hbWUsIHRoaXMuX2xpbmspO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNhcmQoKSB7XHJcbiAgICAgICAgdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlQ2FyZCgpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlVG9nZ2xlTGlrZSgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTGlrZXModGhpcy5saWtlcy5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuX2NoZWNrT3duZXIoKTtcclxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gICAgfVxyXG5cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3Ioe3JlbmRlcmVyfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckl0ZW1zKGNhcmRBcnIpIHtcclxuICAgICAgICBjYXJkQXJyLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldmVyc2VJdGVtKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xyXG4gICAgY29uc3RydWN0b3Ioe3VzZXJOYW1lU2VsZWN0b3IsIHVzZXJJbmZvU2VsZWN0b3IsIHVzZXJBdmF0YXJTZWxlY3Rvcn0pIHtcclxuICAgICAgICB0aGlzLl91c2VyTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodXNlck5hbWVTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fdXNlckluZm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHVzZXJJbmZvU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHVzZXJBdmF0YXJTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fdXNlcklkID0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5fdXNlck5hbWUudGV4dENvbnRlbnQsXHJcbiAgICAgICAgICAgIGluZm86IHRoaXMuX3VzZXJJbmZvLnRleHRDb250ZW50XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldFVzZXJJbmZvKG5hbWVVcGRhdGUsIGluZm9VcGRhdGUsIGlkKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlck5hbWUudGV4dENvbnRlbnQgPSBuYW1lVXBkYXRlO1xyXG4gICAgICAgIHRoaXMuX3VzZXJJbmZvLnRleHRDb250ZW50ID0gaW5mb1VwZGF0ZTtcclxuICAgICAgICB0aGlzLl91c2VySWQgPSBpZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VySWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJJZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRVc2VyQXZhdGFyKGF2YXRhcikge1xyXG4gICAgICAgIHRoaXMuX3VzZXJBdmF0YXIuc3JjID0gYXZhdGFyO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVFc2NDbG9zZSA9IHRoaXMuX2hhbmRsZUVzY0Nsb3NlLmJpbmQodGhpcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZCgncG9wdXBfb3BlbicpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5faGFuZGxlckNsaWNrQ2xvc2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9vcGVuJyk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9oYW5kbGVyQ2xpY2tDbG9zZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9oYW5kbGVFc2NDbG9zZShldnQpIHtcclxuICAgICAgICBpZiAoZXZ0LmtleSA9PT0gJ0VzY2FwZScpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLl9wb3B1cCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfaGFuZGxlckNsaWNrQ2xvc2UgPSAoZXZ0KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cCcpIHx8IGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cF9fYnV0dG9uLWNsb3NlJykpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5faGFuZGxlckNsaWNrQ2xvc2UpO1xyXG4gICAgfTtcclxufSIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZXJTdWJtaXRGb3JtKSB7XHJcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlclN1Ym1pdEZvcm0gPSBoYW5kbGVyU3VibWl0Rm9ybTtcclxuICAgICAgICB0aGlzLl9wb3B1cEZvcm0gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2NvbnRhaW5lcicpO1xyXG4gICAgICAgIHRoaXMuX2J1dHRvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fc3VibWl0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwSW5wdXRzID0gdGhpcy5fcG9wdXBGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9faW5wdXQnKTtcclxuICAgICAgICBjb25zdCBpbnB1dHNMaXN0ID0ge307XHJcbiAgICAgICAgdGhpcy5fcG9wdXBJbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgICAgICAgaW5wdXRzTGlzdFtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBpbnB1dHNMaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIF9oYW5kbGVyQ2xvc2VDbGljayA9IChldnQpID0+IHtcclxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVyU3VibWl0Rm9ybSh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLl9oYW5kbGVyQ2xvc2VDbGljayk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLl9wb3B1cEZvcm0ucmVzZXQoKTtcclxuICAgICAgICB0aGlzLl9wb3B1cC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLl9oYW5kbGVyQ2xvc2VDbGljayk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlVGV4dE9uQnV0dG9uKHRleHQpIHtcclxuICAgICAgICB0aGlzLl9idXR0b24udGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7bmFtZSwgbGlua30sIHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW1hZ2UnKTtcclxuICAgIHRoaXMuX3BvcHVwVGV4dCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW1hZ2UtdGV4dCcpO1xyXG4gICAgdGhpcy5fbGluayA9IGxpbms7XHJcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKCkge1xyXG4gICAgICAgIHN1cGVyLm9wZW4oKTtcclxuICAgICAgICB0aGlzLl9wb3B1cEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZS5hbHQgPSB0aGlzLl9uYW1lO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwVGV4dC50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhTdWJtaXQgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3RvcihoYW5kbGVyU3VibWl0Rm9ybSwgcG9wdXBTZWxlY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZXJTdWJtaXRGb3JtID0gaGFuZGxlclN1Ym1pdEZvcm07XHJcbiAgICAgICAgdGhpcy5fZm9ybUVsZW1lbnQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2NvbnRhaW5lcicpO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oY2FyZCkge1xyXG4gICAgICAgIHN1cGVyLm9wZW4oKTtcclxuICAgICAgICB0aGlzLmNhcmQgPSBjYXJkO1xyXG4gICAgfTtcclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfaGFuZGxlclN1Ym1pdCA9IChldnQpID0+IHtcclxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVyU3VibWl0Rm9ybSh0aGlzLmNhcmQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuX2hhbmRsZXJTdWJtaXQpO1xyXG4gICAgfTtcclxufTsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gICAgY29uc3RydWN0b3IobGluaywgdG9rZW4pIHtcclxuICAgICAgICB0aGlzLl9saW5rID0gbGluaztcclxuICAgICAgICB0aGlzLl90b2tlbiA9IHRva2VuO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2xpbmt9L2NhcmRzYCwge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tTdGF0dXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJJbmZvKCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9saW5rfS91c2Vycy9tZWAsIHtcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fdG9rZW5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2NoZWNrU3RhdHVzKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVVc2VySW5mbyhuYW1lLCBhYm91dCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9saW5rfS91c2Vycy9tZWAsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlbixcclxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgIGFib3V0OiBhYm91dFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2NoZWNrU3RhdHVzKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGROZXdDYXJkKG5hbWUsIGxpbmspIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fbGlua30vY2FyZHNgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlbixcclxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgIGxpbms6IGxpbmtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbih0aGlzLl9jaGVja1N0YXR1cyk7XHJcbiAgICB9XHJcblxyXG4gICAgX2NoZWNrU3RhdHVzKHJlcykge1xyXG4gICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChg0J7RiNC40LHQutCwOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkTGlrZVVwZGF0ZShjYXJkSWQpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fbGlua30vY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlbixcclxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2NoZWNrU3RhdHVzKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVMaWtlVXBkYXRlKGNhcmRJZCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9saW5rfS9jYXJkcy9saWtlcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX3Rva2VuLFxyXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tTdGF0dXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUNhcmQoY2FyZElkKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2xpbmt9L2NhcmRzLyR7Y2FyZElkfWAsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fdG9rZW4sXHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbih0aGlzLl9jaGVja1N0YXR1cyk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlQXZhdGFyKGF2YXRhcikge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9saW5rfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BBVENIJyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fdG9rZW4sXHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIGF2YXRhcjogYXZhdGFyXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tTdGF0dXMpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNvbnN0IHZhbGlkYXRpb25PYmogPSB7XHJcbiAgICBmb3JtU2VsZWN0b3I6ICcucG9wdXBfX2NvbnRhaW5lcicsXHJcbiAgICBpbnB1dFNlbGVjdG9yOiAnLnBvcHVwX19pbnB1dCcsXHJcbiAgICBzdWJtaXRCdXR0b25TZWxlY3RvcjogJy5wb3B1cF9fc3VibWl0JyxcclxuICAgIGluYWN0aXZlQnV0dG9uQ2xhc3M6ICdwb3B1cF9fc3VibWl0X2Rpc2FibGVkJyxcclxuICAgIGlucHV0RXJyb3JDbGFzczogJ3BvcHVwX19pbnB1dF90eXBlX2Vycm9yJyxcclxuICAgIGVycm9yQ2xhc3M6ICdwb3B1cF9faW5wdXQtZXJyb3InLFxyXG4gICAgZXJyb3JNZXNzYWdlQ2xhc3M6ICdwb3B1cF9faW5wdXQtZXJyb3JfdmlzaWJsZSdcclxufTtcclxuXHJcblxyXG4vLyDQmtC90L7Qv9C+0YfQutC4XHJcbmV4cG9ydCBjb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2J1dHRvbi1lZGl0Jyk7XHJcbmV4cG9ydCBjb25zdCBhZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2FkZC1idXR0b24nKTtcclxuZXhwb3J0IGNvbnN0IGVkaXRBdmF0YXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fb3ZlcmxheScpO1xyXG4vLyDQn9GA0LjRgdCy0LDQuNCy0LDQvdC40LUg0LzQvtC00LjRhNC40LrQsNGC0L7RgNC+0LIg0L/QvtC/0LDQv9Cw0Lwg0LTQu9GPINGA0LDQt9Cz0YDQsNC90LjRh9C10L3QuNGPXHJcbmV4cG9ydCBjb25zdCBwb3B1cFR5cGVFZGl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX3R5cGVfZWRpdCcpO1xyXG5leHBvcnQgY29uc3QgcG9wdXBUeXBlQWRkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX3R5cGVfYWRkJyk7XHJcbmV4cG9ydCBjb25zdCBwb3B1cFR5cGVVcGRhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfdHlwZV91cGRhdGUtYXZhdGFyJyk7XHJcbi8vINCa0L3QvtC/0LrQuCDRgdC+0YXRgNCw0L3QuNGC0YxcclxuZXhwb3J0IGNvbnN0IHN1Ym1pdEZvcm1FZGl0ID0gcG9wdXBUeXBlRWRpdC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2NvbnRhaW5lcicpO1xyXG5leHBvcnQgY29uc3Qgc3VibWl0Rm9ybUFkZCA9IHBvcHVwVHlwZUFkZC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2NvbnRhaW5lcicpO1xyXG5leHBvcnQgY29uc3Qgc3VibWl0Rm9ybVVwZGF0ZSA9IHBvcHVwVHlwZVVwZGF0ZS5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2NvbnRhaW5lcicpO1xyXG4vLyDQn9C+0LvRjyDQv9C+0L/QsNC/0LBcclxuZXhwb3J0IGNvbnN0IGlucHV0TmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW5wdXRfdHlwZV9uYW1lJyk7XHJcbmV4cG9ydCBjb25zdCBkZXNjcmlwdGlvbklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dF90eXBlX2Rlc2NyaXB0aW9uJyk7XHJcbi8vINCh0LXQu9C10LrRgtC+0YDRiyDQtNC70Y8g0LrQu9Cw0YHRgdC+0LJcclxuZXhwb3J0IGNvbnN0IGVsZW1lbnRzU2VsZWN0b3IgPSAnLmVsZW1lbnRzJztcclxuZXhwb3J0IGNvbnN0IHVzZXJOYW1lU2VsZWN0b3IgPSAnLnByb2ZpbGVfX25hbWUnO1xyXG5leHBvcnQgY29uc3QgdXNlckluZm9TZWxlY3RvciA9ICcucHJvZmlsZV9fZGVzY3JpcHRpb24nO1xyXG5leHBvcnQgY29uc3QgdXNlckF2YXRhclNlbGVjdG9yID0gJy5wcm9maWxlX19hdmF0YXInO1xyXG5leHBvcnQgY29uc3QgcG9wdXBFZGl0U2VsZWN0b3IgPSAnLnBvcHVwX3R5cGVfZWRpdCc7XHJcbmV4cG9ydCBjb25zdCBwb3B1cEFkZFNlbGVjdG9yID0gJy5wb3B1cF90eXBlX2FkZCc7XHJcbmV4cG9ydCBjb25zdCBwb3B1cEltZ1NlbGVjdG9yID0gJy5wb3B1cF90eXBlX2ltYWdlJztcclxuZXhwb3J0IGNvbnN0IHBvcHVwRGVsZXRlU3VibWl0U2VsZWN0b3IgPSAnLnBvcHVwX3R5cGVfZGVsZXRlJztcclxuZXhwb3J0IGNvbnN0IHBvcHVwVXBkYXRlQXZhdGFyU2VsZWN0b3IgPSAnLnBvcHVwX3R5cGVfdXBkYXRlLWF2YXRhcic7IiwiaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhTdWJtaXQgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoU3VibWl0LmpzXCI7XHJcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XHJcblxyXG5pbXBvcnQgJy4vaW5kZXguY3NzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICB2YWxpZGF0aW9uT2JqLFxyXG4gICAgZWRpdEJ1dHRvbixcclxuICAgIGFkZENhcmRCdXR0b24sXHJcbiAgICBzdWJtaXRGb3JtRWRpdCxcclxuICAgIHN1Ym1pdEZvcm1BZGQsXHJcbiAgICBwb3B1cEVkaXRTZWxlY3RvcixcclxuICAgIHBvcHVwQWRkU2VsZWN0b3IsXHJcbiAgICBwb3B1cEltZ1NlbGVjdG9yLFxyXG4gICAgaW5wdXROYW1lLFxyXG4gICAgZGVzY3JpcHRpb25JbnB1dCxcclxuICAgIGVsZW1lbnRzU2VsZWN0b3IsXHJcbiAgICB1c2VyTmFtZVNlbGVjdG9yLFxyXG4gICAgdXNlckluZm9TZWxlY3RvcixcclxuICAgIHVzZXJBdmF0YXJTZWxlY3RvcixcclxuICAgIHBvcHVwRGVsZXRlU3VibWl0U2VsZWN0b3IsXHJcbiAgICBwb3B1cFVwZGF0ZUF2YXRhclNlbGVjdG9yLFxyXG4gICAgZWRpdEF2YXRhckJ1dHRvbixcclxuICAgIHN1Ym1pdEZvcm1VcGRhdGVcclxufSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcblxyXG4vLyDQotGD0YIg0L3QtSDQsNGB0YHQuNC90YXRgNC+0L3QvdGL0LUgTkVXXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHt1c2VyTmFtZVNlbGVjdG9yLCB1c2VySW5mb1NlbGVjdG9yLCB1c2VyQXZhdGFyU2VsZWN0b3J9KTtcclxuXHJcbmNvbnN0IHZhbGlkYXRlRm9ybUVkaXQgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uT2JqLCBzdWJtaXRGb3JtRWRpdCk7XHJcbnZhbGlkYXRlRm9ybUVkaXQuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuY29uc3QgdmFsaWRhdGVGb3JtQWRkID0gbmV3IEZvcm1WYWxpZGF0b3IodmFsaWRhdGlvbk9iaiwgc3VibWl0Rm9ybUFkZCk7XHJcbnZhbGlkYXRlRm9ybUFkZC5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG5jb25zdCB2YWxpZGF0ZUZvcm1VcGRhdGVBdmF0YXIgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uT2JqLCBzdWJtaXRGb3JtVXBkYXRlKTtcclxudmFsaWRhdGVGb3JtVXBkYXRlQXZhdGFyLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoJ2h0dHBzOi8vbWVzdG8ubm9tb3JlcGFydGllcy5jby92MS9jb2hvcnQtMjYnLCAnYWJmNzQ4OWMtMDI4Yi00MGFmLThhNTQtODg4OTlkZDk0MWYwJyk7XHJcblxyXG5jb25zdCBwb3B1cERlbGV0ZSA9IG5ldyBQb3B1cFdpdGhTdWJtaXQoXHJcbiAgICBmdW5jdGlvbiBoYW5kbGVyU3VibWl0Rm9ybShjYXJkKSB7XHJcbiAgICAgICAgYXBpLmRlbGV0ZUNhcmQoY2FyZC5jYXJkSWQpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5tZXNzYWdlID09PSBcItCf0L7RgdGCINGD0LTQsNC70ZHQvVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZC5kZWxldGVNZVBsZWFzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwRGVsZXRlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7XHJcbiAgICB9LFxyXG4gICAgcG9wdXBEZWxldGVTdWJtaXRTZWxlY3Rvcik7XHJcblxyXG4vLyDQpNCj0J3QmtCm0JjQmCAvL1xyXG5mdW5jdGlvbiBoYW5kbGVDYXJkRGVsZXRlKGNhcmQpIHtcclxuICAgIHBvcHVwRGVsZXRlLm9wZW4oY2FyZCk7XHJcbiAgICBwb3B1cERlbGV0ZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDYXJkTGlrZShjYXJkKSB7XHJcbiAgICBjb25zdCBsaWtlVG9nZ2xlID0gY2FyZC5pc0xpa2VkKCkgPyBhcGkuZGVsZXRlTGlrZVVwZGF0ZShjYXJkLmNhcmRJZCkgOiBhcGkuYWRkTGlrZVVwZGF0ZShjYXJkLmNhcmRJZCk7XHJcbiAgICBsaWtlVG9nZ2xlLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIGNhcmQubGlrZXMgPSByZXMubGlrZXM7XHJcbiAgICAgICAgY2FyZC5oYW5kbGVUb2dnbGVMaWtlKCk7XHJcbiAgICAgICAgY2FyZC51cGRhdGVMaWtlcyhyZXMubGlrZXMubGVuZ3RoKTtcclxuICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDYXJkQ2xpY2sobmFtZSwgbGluaykge1xyXG4gICAgY29uc3QgcG9wdXBJbWcgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXHJcbiAgICAgICAge25hbWUsIGxpbmt9LFxyXG4gICAgICAgIHBvcHVwSW1nU2VsZWN0b3IpO1xyXG4gICAgcG9wdXBJbWcub3BlbigpO1xyXG4gICAgcG9wdXBJbWcuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ2FyZChkYXRhLCB1c2VySWQpIHtcclxuICAgIGNvbnN0IG5ld0NhcmQgPSBuZXcgQ2FyZChkYXRhLCAnLmVsZW1lbnQtdGVtcGxhdGUnLCBoYW5kbGVDYXJkQ2xpY2ssIGhhbmRsZUNhcmREZWxldGUsIGhhbmRsZUNhcmRMaWtlLCB1c2VySWQpO1xyXG4gICAgcmV0dXJuIG5ld0NhcmQuY3JlYXRlQ2FyZCgpO1xyXG59XHJcblxyXG4vLyDQn9GA0L7QvNC40YHRiyDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINC40L3RhNC+0YDQvNCw0YbQuNC4INGBINGB0LXRgNCy0LXRgNCwINC4INGA0LXQvdC00LXRgNCwINC10ZFcclxuUHJvbWlzZS5hbGwoW2FwaS5nZXRVc2VySW5mbygpLCBhcGkuZ2V0SW5pdGlhbENhcmRzKCldKVxyXG4gICAgLnRoZW4oKFt1c2VyRGF0YVNlcnZlciwgY2FyZHNEYXRhU2VydmVyXSkgPT4ge1xyXG4gICAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHVzZXJEYXRhU2VydmVyLm5hbWUsIHVzZXJEYXRhU2VydmVyLmFib3V0LCB1c2VyRGF0YVNlcnZlci5faWQpO1xyXG4gICAgICAgIHVzZXJJbmZvLnNldFVzZXJBdmF0YXIodXNlckRhdGFTZXJ2ZXIuYXZhdGFyKTtcclxuICAgICAgICBjb25zdCBjbGFzc1NlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FyZCA9IGNyZWF0ZUNhcmQoaXRlbSwgdXNlckRhdGFTZXJ2ZXIuX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc1NlY3Rpb24ucmV2ZXJzZUl0ZW0oY2FyZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVsZW1lbnRzU2VsZWN0b3IpO1xyXG4gICAgICAgIGNsYXNzU2VjdGlvbi5yZW5kZXJJdGVtcyhjYXJkc0RhdGFTZXJ2ZXIpO1xyXG5cclxuICAgICAgICBjb25zdCBwb3B1cEVkaXQgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICAgICAgICAgICAgcG9wdXBFZGl0U2VsZWN0b3IsXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZXJTdWJtaXRGb3JtKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHBvcHVwRWRpdC51cGRhdGVUZXh0T25CdXR0b24oJ9Ch0L7RhdGA0LDQvdC10L3QuNC1Li4uJyk7XHJcbiAgICAgICAgICAgICAgICBhcGkudXBkYXRlVXNlckluZm8oZGF0YS5hdXRob3JOYW1lLCBkYXRhLmF1dGhvckRlc2NyaXB0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBFZGl0LnVwZGF0ZVRleHRPbkJ1dHRvbign0KHQvtGF0YDQsNC90LjRgtGMJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKGRhdGEuYXV0aG9yTmFtZSwgZGF0YS5hdXRob3JEZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwRWRpdC5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBlZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyRGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgICAgICAgICAgIGlucHV0TmFtZS52YWx1ZSA9IHVzZXJEYXRhLm5hbWU7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uSW5wdXQudmFsdWUgPSB1c2VyRGF0YS5pbmZvO1xyXG4gICAgICAgICAgICBwb3B1cEVkaXQub3BlbigpO1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUZvcm1FZGl0LmNoZWNrRm9ybVN0YXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcG9wdXBFZGl0LnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBvcHVwVXBkYXRlQXZhdGFyID0gbmV3IFBvcHVwV2l0aEZvcm0ocG9wdXBVcGRhdGVBdmF0YXJTZWxlY3RvcixcclxuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlclN1Ym1pdEZvcm0oaW5wdXRzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgcG9wdXBVcGRhdGVBdmF0YXIudXBkYXRlVGV4dE9uQnV0dG9uKCfQodC+0YXRgNCw0L3QtdC90LjQtS4uLicpO1xyXG4gICAgICAgICAgICAgICAgYXBpLnVwZGF0ZUF2YXRhcihpbnB1dHNMaXN0LmF2YXRhcilcclxuICAgICAgICAgICAgICAgICAgICAudGhlbigoaW5wdXRzTGlzdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cFVwZGF0ZUF2YXRhci51cGRhdGVUZXh0T25CdXR0b24oJ9Ch0L7RhdGA0LDQvdC40YLRjCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VySW5mby5zZXRVc2VyQXZhdGFyKGlucHV0c0xpc3QuYXZhdGFyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBVcGRhdGVBdmF0YXIuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgcG9wdXBVcGRhdGVBdmF0YXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICBlZGl0QXZhdGFyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3B1cFVwZGF0ZUF2YXRhci5vcGVuKCk7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlRm9ybVVwZGF0ZUF2YXRhci5jaGVja0Zvcm1TdGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBwb3B1cEFkZCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gICAgICAgICAgICBwb3B1cEFkZFNlbGVjdG9yLFxyXG4gICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVyU3VibWl0Rm9ybShDYXJkRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcG9wdXBBZGQudXBkYXRlVGV4dE9uQnV0dG9uKCfQodC+0YXRgNCw0L3QtdC90LjQtS4uLicpO1xyXG4gICAgICAgICAgICAgICAgYXBpLmFkZE5ld0NhcmQoQ2FyZERhdGEubmFtZSwgQ2FyZERhdGEubGluaylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cFVwZGF0ZUF2YXRhci51cGRhdGVUZXh0T25CdXR0b24oJ9Ch0L7Qt9C00LDRgtGMJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJJZCA9IHVzZXJEYXRhU2VydmVyLl9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Q2FyZCA9IGNyZWF0ZUNhcmQoZGF0YSwgdXNlcklkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NTZWN0aW9uLmFkZEl0ZW0obmV3Q2FyZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQWRkLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcG9wdXBBZGQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICBhZGRDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3B1cEFkZC5vcGVuKCk7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlRm9ybUFkZC5jaGVja0Zvcm1TdGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTsiXSwic291cmNlUm9vdCI6IiJ9